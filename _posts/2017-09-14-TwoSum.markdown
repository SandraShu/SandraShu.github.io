---
layout:     post
title:      "1. Two Sum"
subtitle:   "Leetcode 1. Two Sum"
date:       2017-09-14 10:25:17
author:     "Sandra"
catalog: true
tags:
    - Leetcode
---

# 1. Two Sum

## Description:

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

## Example:

  Given nums = [2, 7, 11, 15], target = 9,

  Because nums[0] + nums[1] = 2 + 7 = 9,
  return [0, 1].
  
## Solution
    class Solution(object):
        def twoSum(self, nums, target):
            """
            :type nums: List[int]
            :type target: int
            :rtype: List[int]
            """
            # 排序, 并筛选出小于target的值       
            sample = []
            for x in nums:
                sample.append(x)

            nums.sort()  

            if nums[0] > 0: 
                nums.append(target)
                #nums = list(set(nums))
                nums.sort()                    
                nums = nums[:nums.index(target)] 

            # 判断数组长度
            count = len(nums)
            if count < 1:
                return []

            # 左右游标
            left = 0
            right = count-1

            # 判断加法
            while left <= count/2 + 1:

                if nums[left] + nums[right] < target:
                    left = left + 1
                elif nums[left] + nums[right] == target:

                    result_left = sample.index(nums[left])
                    result_right = sample.index(nums[right])

                    if nums[left] == nums[right]:
                        result_right = sample[result_left+1:].index(nums[right])+result_left + 1

                    return [result_left, result_right]

                elif nums[left] + nums[right] > target:
                    right = right - 1

            return []
